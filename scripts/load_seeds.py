'''

Methods for loading seeds into pymol. Each function expects output from a different
program from the peptide_design pipeline.

'''

import os
import pandas as pd

def loadSeedClusters(pathToSeedDir, Nclusters=100, prefix="", minClusterSize=3):
    r"""Loads seeds and groups by cluster

    After running 'buildGreedyClusters' seeds will be written out to a directory
    titled "seed_cluster_members". By providing this as `pathToSeedDir`, the
    seeds will be loaded into the session.

    Parameters
    ----------
    var1: str
        After running 'buildGreedyClusters' seeds will be written out to a directory
        titled "seed_cluster_members". Provide this as var1
    var2: int
        Limits the number of clusters that are loaded
    var3: str
        This prefix will be appended to the group names such that seeds are always
        unique, even if multiple sets are loaded
    var4: int
        Removes all seed clusters with less than the provided number of seeds

    """
    pass
    # load all seed files
    seed_paths = glob.glob(pathToSeedDir+"/*.pdb")
    cluster_set = set()
    cluster2objectlist = dict()
    for seed_path in seed_paths:
        seed_name = seed_path.split("/")[-1][:-4]
        name_split = seed_name.split("_")
        cluster_ID = int(name_split[0])
        if cluster_ID > Nclusters:
            continue
        cluster_ID = prefix + "_" + str(cluster_ID) if prefix != "" else cluster_ID
        seed_object_name = prefix + "_" + seed_name if prefix != "" else seed_name
        cmd.load(seed_path,seed_object_name)
        cmd.show_as("lines",seed_object_name)
        if cluster_ID not in cluster_set:
            cluster_set.add(cluster_ID)
            cluster2objectlist[cluster_ID] = [seed_object_name]
        else:
            cluster2objectlist[cluster_ID].append(seed_object_name)

    # group seeds by cluster
    for cluster_ID in cluster_set:
        if (len(cluster2objectlist[cluster_ID]) < minClusterSize):
            cmd.delete(' or '.join(cluster2objectlist[cluster_ID]))
        else:
            cmd.group(cluster_ID,' or '.join(cluster2objectlist[cluster_ID]))
            cmd.color(get_random_color(),cluster_ID)

    return

def loadSeedsByTargetRes(pathToSeedDir):
    # load all seed files
    seed_paths = glob.glob(pathToSeedDir+"/*.pdb")
    targetRes_list = list()
    targetRes2objectlist = dict()
    for seed_path in seed_paths:
        seed_name = seed_path.split("/")[-1][:-4]
        targetRes = seed_name.split("-")[1]
        cmd.load(seed_path)
        cmd.show_as("lines",seed_name)
        if targetRes not in targetRes_list:
            targetRes_list.append(targetRes)
            targetRes2objectlist[targetRes] = [seed_name]
        else:
            targetRes2objectlist[targetRes].append(seed_name)

    targetRes_list.sort()

    # group seeds by cluster
    for targetRes in targetRes_list:
        cmd.group(targetRes,' or '.join(targetRes2objectlist[targetRes]))
        cmd.color(get_random_color(),targetRes)
    return

def colorTargetResiduesBySeeds(target_obj,path_to_table):
    r"""Colors the residues of the target by the number of seeds that were generated

    The number of seeds generated by each residue is looked up in the table and then
    added to the B-factor column. Residues with no information are assumed to have
    generated zero seeds.

    Parameters
    ----------
    var1: str
        The name of the target object.
    var2: int
        The path to the tab-delimited table specifying how many seeds were generated
        by each residue
    """
    pass

    # set all b-factors to zero
    cmd.alter(target_obj,'b=0.0')

    # iterate over residues from the table and set the b-factor in the obj
    df = pd.read_csv(path_to_table,sep='\t')

    for i,row in df.iterrows():
        # get info from the table
        cenResName = row["central_res"]
        chainID = cenResName[0]
        resNum = int(cenResName[1:])
        numSeeds = int(row['seed_num'])

        cmd.alter("%s and chain %s and resi %s and n. CA"%(target_obj,chainID,resNum), "b=%s"%numSeeds)

    return
